{"ast":null,"code":"var _jsxFileName = \"/Users/jangjaehyeok/LikeLion/inhaHackerton/Frontend/react-team5/src/pages/PostRead.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  min-height: 100vh;\n  background-color: #fff;\n`;\n_c = Container;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 20px;\n`;\n_c2 = MainContent;\nconst PostTitle = styled.h1`\n  font-size: 24px;\n  margin-bottom: 10px;\n`;\n_c3 = PostTitle;\nconst PostInfo = styled.div`\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 20px;\n`;\n_c4 = PostInfo;\nconst PostBody = styled.div`\n  font-size: 16px;\n  line-height: 1.6;\n  margin-bottom: 30px;\n`;\n_c5 = PostBody;\nconst LikeButton = styled.button`\n  background-color: ${props => props.liked ? '#ff4081' : '#e0e0e0'};\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  margin-bottom: 20px;\n`;\n_c6 = LikeButton;\nconst CommentSection = styled.div`\n  margin-top: 30px;\n`;\n_c7 = CommentSection;\nconst CommentForm = styled.form`\n  display: flex;\n  margin-bottom: 20px;\n`;\n_c8 = CommentForm;\nconst CommentInput = styled.input`\n  flex: 1;\n  padding: 10px;\n  font-size: 14px;\n  border: 1px solid #ddd;\n  border-radius: 5px 0 0 5px;\n`;\n_c9 = CommentInput;\nconst CommentSubmit = styled.button`\n  padding: 10px 20px;\n  background-color: #2196f3;\n  color: white;\n  border: none;\n  border-radius: 0 5px 5px 0;\n  cursor: pointer;\n`;\n_c10 = CommentSubmit;\nconst Comment = styled.div`\n  background-color: #f5f5f5;\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n`;\n\n// 가상의 API 호출 함수 (실제 구현 시 이 부분을 실제 API 호출로 대체)\n_c11 = Comment;\nconst fetchPostData = async postId => {\n  // 실제로는 여기서 백엔드 API를 호출합니다\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        id: postId,\n        title: \"230212 - 원피스\",\n        author: \"재혁\",\n        date: \"2024. 4. 1. 0:00\",\n        content: \"여기에 본문 내용이 들어갑니다...\",\n        likes: 10,\n        comments: [{\n          id: 1,\n          author: \"user1\",\n          content: \"좋은 글이네요!\"\n        }, {\n          id: 2,\n          author: \"user2\",\n          content: \"재미있게 읽었습니다.\"\n        }]\n      });\n    }, 1000); // 1초 후 데이터 반환 (네트워크 지연 시뮬레이션)\n  });\n};\nconst PostRead = () => {\n  _s();\n  const [postData, setPostData] = useState(null);\n  const [liked, setLiked] = useState(false);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    const loadPostData = async () => {\n      const data = await fetchPostData(\"somePostId\"); // 실제로는 여기에 동적 postId를 넣습니다\n      setPostData(data);\n      setLiked(false); // 초기 상태 설정\n    };\n    loadPostData();\n  }, []);\n  const handleLike = () => {\n    setLiked(!liked);\n    setPostData(prev => ({\n      ...prev,\n      likes: liked ? prev.likes - 1 : prev.likes + 1\n    }));\n    // 여기서 좋아요 상태를 백엔드에 업데이트하는 API 호출을 할 수 있습니다\n  };\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      const newCommentObj = {\n        id: Date.now(),\n        // 임시 ID\n        author: \"현재 사용자\",\n        // 실제로는 로그인한 사용자 정보를 사용\n        content: newComment\n      };\n      setPostData(prev => ({\n        ...prev,\n        comments: [...prev.comments, newCommentObj]\n      }));\n      setNewComment('');\n      // 여기서 새 댓글을 백엔드에 저장하는 API 호출을 할 수 있습니다\n    }\n  };\n  if (!postData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n        children: [/*#__PURE__*/_jsxDEV(PostTitle, {\n          children: postData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PostInfo, {\n          children: [\"\\uC791\\uC131\\uC790: \", postData.author, \" | \\uC791\\uC131\\uC77C: \", postData.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PostBody, {\n          children: postData.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n          onClick: handleLike,\n          liked: liked,\n          children: [\"\\uD83D\\uDC4D \\uC88B\\uC544\\uC694 \", postData.likes]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CommentSection, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uB313\\uAE00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n            onSubmit: handleCommentSubmit,\n            children: [/*#__PURE__*/_jsxDEV(CommentInput, {\n              type: \"text\",\n              value: newComment,\n              onChange: e => setNewComment(e.target.value),\n              placeholder: \"\\uB313\\uAE00\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CommentSubmit, {\n              type: \"submit\",\n              children: \"\\uB4F1\\uB85D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), postData.comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [comment.author, \": \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this), comment.content]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(PostRead, \"zXjPJd8UbWrl0jX5rViTUhNpag0=\");\n_c12 = PostRead;\nexport default PostRead;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"MainContent\");\n$RefreshReg$(_c3, \"PostTitle\");\n$RefreshReg$(_c4, \"PostInfo\");\n$RefreshReg$(_c5, \"PostBody\");\n$RefreshReg$(_c6, \"LikeButton\");\n$RefreshReg$(_c7, \"CommentSection\");\n$RefreshReg$(_c8, \"CommentForm\");\n$RefreshReg$(_c9, \"CommentInput\");\n$RefreshReg$(_c10, \"CommentSubmit\");\n$RefreshReg$(_c11, \"Comment\");\n$RefreshReg$(_c12, \"PostRead\");","map":{"version":3,"names":["React","styled","Header","Sidebar","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","MainContent","_c2","PostTitle","h1","_c3","PostInfo","_c4","PostBody","_c5","LikeButton","button","props","liked","_c6","CommentSection","_c7","CommentForm","form","_c8","CommentInput","input","_c9","CommentSubmit","_c10","Comment","_c11","fetchPostData","postId","Promise","resolve","setTimeout","id","title","author","date","content","likes","comments","PostRead","_s","postData","setPostData","useState","setLiked","newComment","setNewComment","useEffect","loadPostData","data","handleLike","prev","handleCommentSubmit","e","preventDefault","trim","newCommentObj","Date","now","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","value","onChange","target","placeholder","map","comment","_c12","$RefreshReg$"],"sources":["/Users/jangjaehyeok/LikeLion/inhaHackerton/Frontend/react-team5/src/pages/PostRead.jsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  min-height: 100vh;\n  background-color: #fff;\n`;\nconst MainContent = styled.div`\n  flex: 1;\n  padding: 20px;\n`;\n\nconst PostTitle = styled.h1`\n  font-size: 24px;\n  margin-bottom: 10px;\n`;\n\nconst PostInfo = styled.div`\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 20px;\n`;\n\nconst PostBody = styled.div`\n  font-size: 16px;\n  line-height: 1.6;\n  margin-bottom: 30px;\n`;\n\nconst LikeButton = styled.button`\n  background-color: ${props => props.liked ? '#ff4081' : '#e0e0e0'};\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  margin-bottom: 20px;\n`;\n\nconst CommentSection = styled.div`\n  margin-top: 30px;\n`;\n\nconst CommentForm = styled.form`\n  display: flex;\n  margin-bottom: 20px;\n`;\n\nconst CommentInput = styled.input`\n  flex: 1;\n  padding: 10px;\n  font-size: 14px;\n  border: 1px solid #ddd;\n  border-radius: 5px 0 0 5px;\n`;\n\nconst CommentSubmit = styled.button`\n  padding: 10px 20px;\n  background-color: #2196f3;\n  color: white;\n  border: none;\n  border-radius: 0 5px 5px 0;\n  cursor: pointer;\n`;\n\nconst Comment = styled.div`\n  background-color: #f5f5f5;\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n`;\n\n// 가상의 API 호출 함수 (실제 구현 시 이 부분을 실제 API 호출로 대체)\nconst fetchPostData = async (postId) => {\n    // 실제로는 여기서 백엔드 API를 호출합니다\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          id: postId,\n          title: \"230212 - 원피스\",\n          author: \"재혁\",\n          date: \"2024. 4. 1. 0:00\",\n          content: \"여기에 본문 내용이 들어갑니다...\",\n          likes: 10,\n          comments: [\n            { id: 1, author: \"user1\", content: \"좋은 글이네요!\" },\n            { id: 2, author: \"user2\", content: \"재미있게 읽었습니다.\" }\n          ]\n        });\n      }, 1000); // 1초 후 데이터 반환 (네트워크 지연 시뮬레이션)\n    });\n  };\n\n\n\nconst PostRead = () => {\n    const [postData, setPostData] = useState(null);\n    const [liked, setLiked] = useState(false);\n    const [newComment, setNewComment] = useState('');\n\n    useEffect(() => {\n        const loadPostData = async () => {\n            const data = await fetchPostData(\"somePostId\"); // 실제로는 여기에 동적 postId를 넣습니다\n            setPostData(data);\n            setLiked(false); // 초기 상태 설정\n        };\n        loadPostData();\n    }, []);\n\n    const handleLike = () => {\n        setLiked(!liked);\n        setPostData(prev => ({\n            ...prev,\n            likes: liked ? prev.likes - 1 : prev.likes + 1\n        }));\n        // 여기서 좋아요 상태를 백엔드에 업데이트하는 API 호출을 할 수 있습니다\n    };\n\n    const handleCommentSubmit = (e) => {\n        e.preventDefault();\n        if (newComment.trim()) {\n            const newCommentObj = {\n                id: Date.now(), // 임시 ID\n                author: \"현재 사용자\", // 실제로는 로그인한 사용자 정보를 사용\n                content: newComment\n            };\n            setPostData(prev => ({\n                ...prev,\n                comments: [...prev.comments, newCommentObj]\n            }));\n            setNewComment('');\n            // 여기서 새 댓글을 백엔드에 저장하는 API 호출을 할 수 있습니다\n        }\n    };\n\n    if (!postData) return <div>로딩 중...</div>;\n\n    return (\n        <>\n            <Header />\n            <Container>\n                <Sidebar />\n                <MainContent>\n                    <PostTitle>{postData.title}</PostTitle>\n                    <PostInfo>작성자: {postData.author} | 작성일: {postData.date}</PostInfo>\n                    <PostBody>{postData.content}</PostBody>\n                    <LikeButton onClick={handleLike} liked={liked}>\n                        👍 좋아요 {postData.likes}\n                    </LikeButton>\n                    <CommentSection>\n                        <h3>댓글</h3>\n                        <CommentForm onSubmit={handleCommentSubmit}>\n                            <CommentInput \n                                type=\"text\" \n                                value={newComment}\n                                onChange={(e) => setNewComment(e.target.value)}\n                                placeholder=\"댓글을 입력하세요\"\n                            />\n                            <CommentSubmit type=\"submit\">등록</CommentSubmit>\n                        </CommentForm>\n                        {postData.comments.map((comment) => (\n                            <Comment key={comment.id}>\n                                <strong>{comment.author}: </strong>{comment.content}\n                            </Comment>\n                        ))}\n                    </CommentSection>\n                </MainContent>\n            </Container>\n        </>\n    );\n}\n\nexport default PostRead;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,SAAS,GAAGP,MAAM,CAACQ,GAAG;AAC5B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,SAAS;AAMf,MAAMG,WAAW,GAAGV,MAAM,CAACQ,GAAG;AAC9B;AACA;AACA,CAAC;AAACG,GAAA,GAHID,WAAW;AAKjB,MAAME,SAAS,GAAGZ,MAAM,CAACa,EAAE;AAC3B;AACA;AACA,CAAC;AAACC,GAAA,GAHIF,SAAS;AAKf,MAAMG,QAAQ,GAAGf,MAAM,CAACQ,GAAG;AAC3B;AACA;AACA;AACA,CAAC;AAACQ,GAAA,GAJID,QAAQ;AAMd,MAAME,QAAQ,GAAGjB,MAAM,CAACQ,GAAG;AAC3B;AACA;AACA;AACA,CAAC;AAACU,GAAA,GAJID,QAAQ;AAMd,MAAME,UAAU,GAAGnB,MAAM,CAACoB,MAAM;AAChC,sBAAsBC,KAAK,IAAIA,KAAK,CAACC,KAAK,GAAG,SAAS,GAAG,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GATIJ,UAAU;AAWhB,MAAMK,cAAc,GAAGxB,MAAM,CAACQ,GAAG;AACjC;AACA,CAAC;AAACiB,GAAA,GAFID,cAAc;AAIpB,MAAME,WAAW,GAAG1B,MAAM,CAAC2B,IAAI;AAC/B;AACA;AACA,CAAC;AAACC,GAAA,GAHIF,WAAW;AAKjB,MAAMG,YAAY,GAAG7B,MAAM,CAAC8B,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIF,YAAY;AAQlB,MAAMG,aAAa,GAAGhC,MAAM,CAACoB,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACa,IAAA,GAPID,aAAa;AASnB,MAAME,OAAO,GAAGlC,MAAM,CAACQ,GAAG;AAC1B;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAA2B,IAAA,GAPMD,OAAO;AAQb,MAAME,aAAa,GAAG,MAAOC,MAAM,IAAK;EACpC;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QACNE,EAAE,EAAEJ,MAAM;QACVK,KAAK,EAAE,cAAc;QACrBC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE,kBAAkB;QACxBC,OAAO,EAAE,qBAAqB;QAC9BC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,CACR;UAAEN,EAAE,EAAE,CAAC;UAAEE,MAAM,EAAE,OAAO;UAAEE,OAAO,EAAE;QAAW,CAAC,EAC/C;UAAEJ,EAAE,EAAE,CAAC;UAAEE,MAAM,EAAE,OAAO;UAAEE,OAAO,EAAE;QAAc,CAAC;MAEtD,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;AAIH,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC9B,KAAK,EAAE+B,QAAQ,CAAC,GAAGD,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EAEhDI,SAAS,CAAC,MAAM;IACZ,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,IAAI,GAAG,MAAMtB,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC;MAChDe,WAAW,CAACO,IAAI,CAAC;MACjBL,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC;IACDI,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,UAAU,GAAGA,CAAA,KAAM;IACrBN,QAAQ,CAAC,CAAC/B,KAAK,CAAC;IAChB6B,WAAW,CAACS,IAAI,KAAK;MACjB,GAAGA,IAAI;MACPd,KAAK,EAAExB,KAAK,GAAGsC,IAAI,CAACd,KAAK,GAAG,CAAC,GAAGc,IAAI,CAACd,KAAK,GAAG;IACjD,CAAC,CAAC,CAAC;IACH;EACJ,CAAC;EAED,MAAMe,mBAAmB,GAAIC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIT,UAAU,CAACU,IAAI,CAAC,CAAC,EAAE;MACnB,MAAMC,aAAa,GAAG;QAClBxB,EAAE,EAAEyB,IAAI,CAACC,GAAG,CAAC,CAAC;QAAE;QAChBxB,MAAM,EAAE,QAAQ;QAAE;QAClBE,OAAO,EAAES;MACb,CAAC;MACDH,WAAW,CAACS,IAAI,KAAK;QACjB,GAAGA,IAAI;QACPb,QAAQ,EAAE,CAAC,GAAGa,IAAI,CAACb,QAAQ,EAAEkB,aAAa;MAC9C,CAAC,CAAC,CAAC;MACHV,aAAa,CAAC,EAAE,CAAC;MACjB;IACJ;EACJ,CAAC;EAED,IAAI,CAACL,QAAQ,EAAE,oBAAO9C,OAAA;IAAAgE,QAAA,EAAK;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAExC,oBACIpE,OAAA,CAAAE,SAAA;IAAA8D,QAAA,gBACIhE,OAAA,CAACH,MAAM;MAAAoE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVpE,OAAA,CAACG,SAAS;MAAA6D,QAAA,gBACNhE,OAAA,CAACF,OAAO;QAAAmE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACXpE,OAAA,CAACM,WAAW;QAAA0D,QAAA,gBACRhE,OAAA,CAACQ,SAAS;UAAAwD,QAAA,EAAElB,QAAQ,CAACR;QAAK;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACvCpE,OAAA,CAACW,QAAQ;UAAAqD,QAAA,GAAC,sBAAK,EAAClB,QAAQ,CAACP,MAAM,EAAC,yBAAQ,EAACO,QAAQ,CAACN,IAAI;QAAA;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAClEpE,OAAA,CAACa,QAAQ;UAAAmD,QAAA,EAAElB,QAAQ,CAACL;QAAO;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eACvCpE,OAAA,CAACe,UAAU;UAACsD,OAAO,EAAEd,UAAW;UAACrC,KAAK,EAAEA,KAAM;UAAA8C,QAAA,GAAC,kCACpC,EAAClB,QAAQ,CAACJ,KAAK;QAAA;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,eACbpE,OAAA,CAACoB,cAAc;UAAA4C,QAAA,gBACXhE,OAAA;YAAAgE,QAAA,EAAI;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACXpE,OAAA,CAACsB,WAAW;YAACgD,QAAQ,EAAEb,mBAAoB;YAAAO,QAAA,gBACvChE,OAAA,CAACyB,YAAY;cACT8C,IAAI,EAAC,MAAM;cACXC,KAAK,EAAEtB,UAAW;cAClBuB,QAAQ,EAAGf,CAAC,IAAKP,aAAa,CAACO,CAAC,CAACgB,MAAM,CAACF,KAAK,CAAE;cAC/CG,WAAW,EAAC;YAAW;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1B,CAAC,eACFpE,OAAA,CAAC4B,aAAa;cAAC2C,IAAI,EAAC,QAAQ;cAAAP,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAe,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,EACbtB,QAAQ,CAACH,QAAQ,CAACiC,GAAG,CAAEC,OAAO,iBAC3B7E,OAAA,CAAC8B,OAAO;YAAAkC,QAAA,gBACJhE,OAAA;cAAAgE,QAAA,GAASa,OAAO,CAACtC,MAAM,EAAC,IAAE;YAAA;cAAA0B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAACS,OAAO,CAACpC,OAAO;UAAA,GADzCoC,OAAO,CAACxC,EAAE;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEf,CACZ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACU,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA,eACd,CAAC;AAEX,CAAC;AAAAvB,EAAA,CA3EKD,QAAQ;AAAAkC,IAAA,GAARlC,QAAQ;AA6Ed,eAAeA,QAAQ;AAAC,IAAAvC,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAK,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAE,IAAA,EAAAE,IAAA,EAAA+C,IAAA;AAAAC,YAAA,CAAA1E,EAAA;AAAA0E,YAAA,CAAAxE,GAAA;AAAAwE,YAAA,CAAArE,GAAA;AAAAqE,YAAA,CAAAnE,GAAA;AAAAmE,YAAA,CAAAjE,GAAA;AAAAiE,YAAA,CAAA5D,GAAA;AAAA4D,YAAA,CAAA1D,GAAA;AAAA0D,YAAA,CAAAvD,GAAA;AAAAuD,YAAA,CAAApD,GAAA;AAAAoD,YAAA,CAAAlD,IAAA;AAAAkD,YAAA,CAAAhD,IAAA;AAAAgD,YAAA,CAAAD,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}