{"ast":null,"code":"var _jsxFileName = \"/Users/jangjaehyeok/LikeLion/inhaHackerton/Frontend/react-team5/FE/src/pages/CommunityPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport PostCard from \"../components/PostCard\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageLayout = styled.div`\n  display: flex;\n  min-height: 100vh;\n`;\n_c = PageLayout;\nconst MainContent = styled.main`\n  flex-grow: 1;\n  padding: 20px;\n  background-color: #f5f5f5;\n`;\n_c2 = MainContent;\nconst PostGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n`;\n_c3 = PostGrid;\nconst FilterButtons = styled.div`\n  margin-bottom: 20px;\n`;\nconst FilterButton = styled.button`\n  margin-right: 10px;\n  padding: 5px 10px;\n  background-color: ${props => props.active ? \"#FFD43B\" : \"#f8f9fa\"};\n  color: ${props => props.active ? \"white\" : \"black\"};\n  border: 1px solid #ffd43b;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #ffd43b;\n    color: white;\n  }\n`;\n_c4 = FilterButton;\nconst CommunityPage = () => {\n  _s();\n  const {\n    category\n  } = useParams();\n  const text = category || \"\";\n  const [posts, setPosts] = useState([]);\n  const [sortBy, setSortBy] = useState(\"likes\");\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const countryInfo = {\n    2: \"Japan\",\n    3: \"Korea\"\n  };\n  const continentInfo = {\n    1: \"Asia\",\n    2: \"Europe\"\n  };\n  const fetchPosts = useCallback(async () => {\n    try {\n      const response = await axios.get('http://43.200.226.225/category/list/community'); // 실제 API 엔드포인트로 변경하세요\n      console.log('Fetched posts:', response.data); // 응답 데이터 콘솔에 출력\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n      return [];\n    }\n  }, []);\n  useEffect(() => {\n    const fetchAndSetPosts = async () => {\n      const fetchedPosts = await fetchPosts();\n      console.log('Setting posts:', fetchedPosts); // 설정할 데이터 콘솔에 출력\n      setPosts(Array.isArray(fetchedPosts) ? fetchedPosts : []);\n    };\n    fetchAndSetPosts();\n  }, [fetchPosts]);\n  const sortPosts = useCallback(postsToSort => {\n    return [...postsToSort].sort((a, b) => {\n      if (sortBy === \"likes\") {\n        return b.likes - a.likes;\n      } else {\n        return new Date(b.created_at) - new Date(a.created_at);\n      }\n    });\n  }, [sortBy]);\n  useEffect(() => {\n    setPosts(prevPosts => sortPosts(prevPosts));\n  }, [sortBy, sortPosts]);\n  const handleSortChange = newSortBy => {\n    setSortBy(newSortBy);\n  };\n  const handleCountrySelect = country => {\n    setSelectedCountry(country);\n  };\n  const filteredPosts = selectedCountry ? posts.filter(post => post.country_id === selectedCountry) : posts;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        text: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uCEE4\\uBBA4\\uB2C8\\uD2F0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [Object.entries(countryInfo).map(([code, name]) => /*#__PURE__*/_jsxDEV(FilterButton, {\n            onClick: () => handleCountrySelect(Number(code)),\n            active: selectedCountry === Number(code),\n            children: name\n          }, code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(FilterButton, {\n            onClick: () => setSelectedCountry(null),\n            active: selectedCountry === null,\n            children: \"\\uC804\\uCCB4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FilterButton, {\n            onClick: () => handleSortChange(\"likes\"),\n            active: sortBy === \"likes\",\n            children: \"\\uC778\\uAE30\\uC21C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FilterButton, {\n            onClick: () => handleSortChange(\"date\"),\n            active: sortBy === \"date\",\n            children: \"\\uCD5C\\uC2E0\\uC21C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PostGrid, {\n          children: filteredPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n            title: post.title,\n            author: post.author_id,\n            date: new Date(post.created_at).toLocaleDateString(),\n            content: post.content,\n            country: countryInfo[post.country_id],\n            continent: continentInfo[post.continent_id]\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CommunityPage, \"fdRk36MC32GJEjm5FPtSTbyjgG4=\", false, function () {\n  return [useParams];\n});\n_c5 = CommunityPage;\nexport default CommunityPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"PageLayout\");\n$RefreshReg$(_c2, \"MainContent\");\n$RefreshReg$(_c3, \"PostGrid\");\n$RefreshReg$(_c4, \"FilterButton\");\n$RefreshReg$(_c5, \"CommunityPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","Header","Sidebar","PostCard","useParams","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","PageLayout","div","_c","MainContent","main","_c2","PostGrid","_c3","FilterButtons","FilterButton","button","props","active","_c4","CommunityPage","_s","category","text","posts","setPosts","sortBy","setSortBy","selectedCountry","setSelectedCountry","countryInfo","continentInfo","fetchPosts","response","get","console","log","data","error","fetchAndSetPosts","fetchedPosts","Array","isArray","sortPosts","postsToSort","sort","a","b","likes","Date","created_at","prevPosts","handleSortChange","newSortBy","handleCountrySelect","country","filteredPosts","filter","post","country_id","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","code","name","onClick","Number","title","author","author_id","date","toLocaleDateString","content","continent","continent_id","id","_c5","$RefreshReg$"],"sources":["/Users/jangjaehyeok/LikeLion/inhaHackerton/Frontend/react-team5/FE/src/pages/CommunityPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport PostCard from \"../components/PostCard\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\n\nconst PageLayout = styled.div`\n  display: flex;\n  min-height: 100vh;\n`;\n\nconst MainContent = styled.main`\n  flex-grow: 1;\n  padding: 20px;\n  background-color: #f5f5f5;\n`;\n\nconst PostGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n`;\n\nconst FilterButtons = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst FilterButton = styled.button`\n  margin-right: 10px;\n  padding: 5px 10px;\n  background-color: ${(props) => (props.active ? \"#FFD43B\" : \"#f8f9fa\")};\n  color: ${(props) => (props.active ? \"white\" : \"black\")};\n  border: 1px solid #ffd43b;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #ffd43b;\n    color: white;\n  }\n`;\n\nconst CommunityPage = () => {\n  const { category } = useParams();\n  const text = category || \"\";\n  const [posts, setPosts] = useState([]);\n  const [sortBy, setSortBy] = useState(\"likes\");\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  const countryInfo = {\n    2: \"Japan\",\n    3: \"Korea\"\n  };\n\n  const continentInfo = {\n    1: \"Asia\",\n    2: \"Europe\"\n  };\n\n  const fetchPosts = useCallback(async () => {\n    try {\n      const response = await axios.get('http://43.200.226.225/category/list/community'); // 실제 API 엔드포인트로 변경하세요\n      console.log('Fetched posts:', response.data); // 응답 데이터 콘솔에 출력\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n      return [];\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchAndSetPosts = async () => {\n      const fetchedPosts = await fetchPosts();\n      console.log('Setting posts:', fetchedPosts); // 설정할 데이터 콘솔에 출력\n      setPosts(Array.isArray(fetchedPosts) ? fetchedPosts : []);\n    };\n    fetchAndSetPosts();\n  }, [fetchPosts]);\n\n  const sortPosts = useCallback(\n    (postsToSort) => {\n      return [...postsToSort].sort((a, b) => {\n        if (sortBy === \"likes\") {\n          return b.likes - a.likes;\n        } else {\n          return new Date(b.created_at) - new Date(a.created_at);\n        }\n      });\n    },\n    [sortBy]\n  );\n\n  useEffect(() => {\n    setPosts((prevPosts) => sortPosts(prevPosts));\n  }, [sortBy, sortPosts]);\n\n  const handleSortChange = (newSortBy) => {\n    setSortBy(newSortBy);\n  };\n\n  const handleCountrySelect = (country) => {\n    setSelectedCountry(country);\n  };\n\n  const filteredPosts = selectedCountry\n    ? posts.filter((post) => post.country_id === selectedCountry)\n    : posts;\n\n  return (\n    <>\n      <Header />\n      <PageLayout>\n        <Sidebar text={text} />\n        <MainContent>\n          <h1>커뮤니티</h1>\n          <div>\n            {Object.entries(countryInfo).map(([code, name]) => (\n              <FilterButton\n                key={code}\n                onClick={() => handleCountrySelect(Number(code))}\n                active={selectedCountry === Number(code)}\n              >\n                {name}\n              </FilterButton>\n            ))}\n            <FilterButton\n              onClick={() => setSelectedCountry(null)}\n              active={selectedCountry === null}\n            >\n              전체\n            </FilterButton>\n          </div>\n          <div>\n            <FilterButton\n              onClick={() => handleSortChange(\"likes\")}\n              active={sortBy === \"likes\"}\n            >\n              인기순\n            </FilterButton>\n            <FilterButton\n              onClick={() => handleSortChange(\"date\")}\n              active={sortBy === \"date\"}\n            >\n              최신순\n            </FilterButton>\n          </div>\n          <PostGrid>\n            {filteredPosts.map((post) => (\n              <PostCard\n                key={post.id}\n                title={post.title}\n                author={post.author_id}\n                date={new Date(post.created_at).toLocaleDateString()}\n                content={post.content}\n                country={countryInfo[post.country_id]}\n                continent={continentInfo[post.continent_id]}\n              />\n            ))}\n          </PostGrid>\n        </MainContent>\n      </PageLayout>\n    </>\n  );\n};\n\nexport default CommunityPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}